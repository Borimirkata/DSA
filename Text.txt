import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
from sympy import symbols,diff,Eq,solve,integrate

#first task y=a10^(bx)
x_arr=np.array([0.4,0.8,1.2,1.6,2,2.3])
y_arr=np.array([800,975,1500,1950,2900,3600])

c,b=symbols('c,b')

def f(x,c,b):
    return b*x+c

def phi(c,b):
    sum_squares=0
    for i in range(x_arr.size):
        sum_squares+=(f(x_arr[i],c,b)-np.log10(y_arr[i]))**2
    return sum_squares


equations=[Eq(diff(phi(c,b),b),0),
           Eq(diff(phi(c,b),c),0)]

sol=solve(equations)

def power10Func(x):
    return np.power(10,float(sol[c])+x*(float(sol[b])))

x_axis=np.linspace(0.4,2.3,1000)
plt.scatter(x_arr,y_arr)
plt.plot(x_axis,power10Func(x_axis))
plt.show()

#second task

x_arr=np.array([0.2,0.5,0.8,1.2,1.7,2,2.3])
y_arr=np.array([500,700,1000,1200,2200,2650,3750])

A=np.zeros([3,3])
b=np.zeros([3])

for i in range(3):
    for k in range(x_arr.size):
        b[i]+=x_arr[k]**i*y_arr[k]
    for j in range(3):
        for k in range(x_arr.size):
            A[i,j]+=x_arr[k]**(i+j)

result=np.linalg.solve(A,b)

def f(x):
    return result[0]*x**2+result[1]*x+result[2]

x_axis=np.linspace(0.2,2.3,1000)
plt.scatter(x_arr,y_arr)
plt.plot(x_axis,f(x_axis))
plt.show()

#third task where y=ax^b

x_arr = np.array([2.5, 3.5, 5, 6, 7.5, 10,12.5,15,17.5,20])
y_arr = np.array([13, 11, 8.5, 8.2, 7, 6.2,5.2,4.8,4.6,4.3])

c, b = symbols('c b')

def f(x,c,b):
    return b*np.log(x)+c

def phi(c,b):
    sum_squares=0
    for i in range(x_arr.size):
        sum_squares+=(f(x_arr[i],c,b)-np.log(y_arr[i]))**2
    return sum_squares

equations=[Eq(diff(phi(c,b),b),0),
           Eq(diff(phi(c,b),c),0)]

sol=solve(equations)

def getBack(x):
    return np.exp(float(sol[c]))*x**(float(sol[b]))

x_axis=np.linspace(2.5,20,1000)
plt.scatter(x_arr,y_arr)
plt.plot(x_axis,getBack(x_axis))
plt.show()

#forth task: where y=axe^(bx)

x_arr = np.array([0.1, 0.2, 0.4, 0.6, 0.9, 1.3,1.5,1.7,1.8])
y_arr = np.array([0.75, 1.25, 1.45, 1.25, 0.85, 0.55,0.35,0.28,0.18])

c, b = symbols('c b')

def f(x,c,b):
    return np.log(x)+c+b*x

def phi(c,b):
    sum_squares=0
    for i in range(x_arr.size):
        sum_squares+=(f(x_arr[i],c,b)-np.log(y_arr[i]))**2
    return sum_squares

equations=[Eq(diff(phi(c,b),c),0),
           Eq(diff(phi(c,b),b),0)]

sol=solve(equations)

def getBack(x):
    return np.exp(float(sol[c]))*x*np.exp(x*float(sol[b]))

x_axis=np.linspace(0.1,1.8,1000)
plt.scatter(x_arr,y_arr)
plt.plot(x_axis,getBack(x_axis))
plt.show()

#fifth task

nodes=np.array([0.5,0.8,1.5,2.5,4])
values=np.array([1.1,2.4,5.3,7.6,8.9])

A,B=symbols('A B')

def f(x,A,B):
    return A*(1/x**2)+B

def phi(A,B):
    sum_squares=0
    for i in range(nodes.size):
        sum_squares+=(f(nodes[i],A,B)-1/values[i])**2
    return sum_squares

equations=[Eq(diff(phi(A,B),A),0),
           Eq(diff(phi(A,B),B),0)]

sol=solve(equations)

def getBack(x):
    return 1/f(x,float(sol[A]),float(sol[B]))

x_axis=np.linspace(0.5,4,1000)
plt.scatter(nodes,values)
plt.plot(x_axis,getBack(x_axis))
plt.scatter(2,getBack(2))
plt.show()

#task number 7

A1,x1,A2,x2,A3,x3,x,t=symbols('A1,x1,A2,x2,A3,x3,x,t')

a=0
b=1

def f(x):
    return sp.exp(sp.sin(x))-2*x**2

def phi(t):
    return ((b-a)/2)*f(((b+a)/2)+((b-a)/2)*t)

equations=[Eq(A1+A2+A3,integrate(1,(x,-1,1))),
           Eq(A1*x1+A2*x2+A3*x3,integrate(x,(x,-1,1))),
           Eq(A1*x1**2+A2*x2**2+A3*x3**2,integrate(x**2,(x,-1,1))),
           Eq(A1*x1**3+A2*x2**3+A3*x3**3,integrate(x**3,(x,-1,1))),
           Eq(A1*x1**4+A2*x2**4+A3*x3**4,integrate(x**4,(x,-1,1))),
           Eq(A1*x1**5+A2*x2**5+A3*x3**5,integrate(x**5,(x,-1,1)))]

sol=solve(equations,A1,x1,A2,x2,A3,x3, dict=True)
print(sol[0])
print("Exact value",integrate(f(x),(x,a,b)).evalf())
print("Gaus three nodes",5/9*phi(-np.sqrt(15)/5)+5/9*phi(np.sqrt(15)/5)+8/9*phi(0))

#task number 10

a=-2
b=-1

def f(x):
    return 1-(sp.cos(x)/sp.sin(x))

exact_value=integrate(f(x),(x,a,b)).evalf()
print(exact_value)
sec_diff=diff(diff(f(x),x),x)
func=sp.lambdify(x,sec_diff)

x_axis=np.linspace(a,b,100)
plt.plot(x_axis,func(x_axis))
plt.show()
#from here we understand that the max value is in 

n=int(np.ceil(100*np.sqrt(10*func(-1))/(2*np.sqrt(6))))
print("n",n)

x_mesh=np.linspace(a,b,n+1)

approx_val=0

for i in range(x_mesh.size-1):
    approx_val+=f((x_mesh[i]+x_mesh[i+1])/2)

approx_val*=(b-a)/n

print("Approximate value",approx_val)
print("Absolute error",np.abs(approx_val-exact_value))

#trapec
n=int(np.ceil(100*np.sqrt(10*func(-1))/(2*np.sqrt(3))))
print("n",n)

x_mesh=np.linspace(a,b,n+1)

approx_val=0

for i in range(x_mesh.size-1):
    approx_val+=f(x_mesh[i])+f(x_mesh[i+1])

approx_val*=(b-a)/(2*n)

print("Approximate value",approx_val)
print("Absolute error",np.abs(approx_val-exact_value))

#simpson
fourth_diff=diff(diff(sec_diff,x),x)
func=sp.lambdify(x,fourth_diff)

x_axis=np.linspace(a,b,100)
plt.plot(x_axis,func(x_axis))
plt.show()

n=int(np.ceil(10*np.power(10*func(-1),1/4)/(np.power(2880,1/4))))
print("n",n)

x_mesh=np.linspace(a,b,n+1)

approx_val=0

for i in range(x_mesh.size-1):
    approx_val+=f(x_mesh[i])+4*f((x_mesh[i]+x_mesh[i+1])/2)+f(x_mesh[i+1])

approx_val*=(b-a)/(6*n)